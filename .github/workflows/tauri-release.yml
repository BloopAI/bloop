name: Tauri Release

on:
  pull_request:

env:
  TAURI_BIN_PATH: apps/desktop/src-tauri/bin
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true

  #     - name: Install dependencies (ubuntu only)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf protobuf-compiler

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         prefix-key: "bloop"
  #         shared-key: "tauri-checks"

  #     - name: Install Rust stable
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Check Formatting
  #       run: |
  #         cargo --locked fmt -p bloop -- --check

  #     - name: Run tests
  #       run: |
  #         cargo --locked test -p bloop --verbose

  build-and-sign-tauri:
    # needs: [checks]

    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-unknown-linux-gnu,
          x86_64-darwin,
        ]

        include:
          - target: x86_64-unknown-linux-gnu
            name: ubuntu-latest

          - target: x86_64-darwin
            name: macos-latest

    runs-on: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup nix
        uses: cachix/install-nix-action@v20
        with:
          github_access_token: "${{ secrets.GITHUB_TOKEN }}"

      - run: nix profile install nixpkgs#protobuf

      - if: matrix.name == 'ubuntu-latest'
        run: sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf protobuf-compiler

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install app dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Download binaries (windows) (windows is disabled)
        if: matrix.name == 'windows-latest'
        shell: bash
        run: |
          dirname=2022-12-05%2Fp5.9.20221204.0-5-gf9d21e7
          filename=ctags-2022-12-05_p5.9.20221204.0-5-gf9d21e7-clang-x64.zip
          curl -LO https://github.com/universal-ctags/ctags-win32/releases/download/$dirname/$filename
          echo "7c7b7e2645347d092474a942f988988ee12e045d1d8e65ae7ced68ecaf672130 $filename" |sha256sum -c - 

          unzip $filename || true
          mv ctags.exe ${{ env.TAURI_BIN_PATH }}/ctags-$(rustc -Vv |grep host |cut -d\  -f2).exe

      - name: Check if Segment key exists
        env:
          segment_key: ${{ secrets.ANALYTICS_FE_WRITE_KEY_PROD }}
          sentry_key_fe: ${{ secrets.SENTRY_DSN_FE }}
        if: ${{ env.segment_key == '' || env.sentry_key_fe == '' }}
        run: exit 1

      - name: Set environment
        run: echo "ANALYTICS_FE_WRITE_KEY_PROD=${{ secrets.ANALYTICS_FE_WRITE_KEY_PROD }}\nSENTRY_DSN_FE=${{ secrets.SENTRY_DSN_FE }}" >> apps/desktop/.env

      - name: Set providerShortName in tauri.conf.json
        uses: jossef/action-set-json-field@v2
        with:
          file: apps/desktop/src-tauri/tauri.conf.json
          field: tauri.bundle.macOS.providerShortName
          value: ${{ secrets.MAC_PROVIDER_SHORT_NAME }}

      - name: Set signingIdentity in tauri.conf.json
        uses: jossef/action-set-json-field@v2
        with:
          file: apps/desktop/src-tauri/tauri.conf.json
          field: tauri.bundle.macOS.signingIdentity
          value: ${{ secrets.APPLE_SIGNING_IDENTITY }}

      - uses: tauri-apps/tauri-action@v0
        env:
          ORT_LIB_LOCATION: ${{ github.workspace }}/lib/${{ matrix.target }}/onnxruntime
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          args: -v -- -v --locked

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-app
          path: target/release/bundle
          retention-days: 5
