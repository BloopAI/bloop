import { test, expect } from '@playwright/test';

const REPOS_TO_SYNC = 1;

if (!process.env.SCAN_FOLDER) {
  throw new Error('SCAN_FOLDER env not set');
}

test.describe.serial('Main test group', () => {
  let page; // Share page context between tests

  test.beforeAll(async ({ browser }) => {
    const context = await browser.newContext();
    page = await context.newPage();
    await page.goto(
      'http://localhost:5173/?chosen_scan_folder=${process.env.SCAN_FOLDER}',
    );
  });

  const repoNames = [];

  test.afterAll(async ({ browser }) => {
    await browser.close();
  });

  test('Local and GitHub onboarding', async () => {
    await page.goto(
      `http://localhost:5173/?chosen_scan_folder=${process.env.SCAN_FOLDER}`,
    );
    await page.getByRole('button', { name: "Don't share" }).click();
    await page.getByPlaceholder('First name').click();
    await page.getByPlaceholder('First name').fill('Steve');
    await page.getByPlaceholder('First name').press('Tab');
    await page.getByRole('button').first().press('Tab');
    await page.getByPlaceholder('Last name').fill('Wozniak');
    await page.getByPlaceholder('Email address').click();
    await page.getByPlaceholder('Email address').fill('steve@bloop.ai');
    await page.locator('form').getByRole('button').nth(2).click();
    await page.getByPlaceholder('Email address').fill('steve.w@bloop.ai');
    await page.getByRole('button', { name: 'Submit' }).click();

    // Local

    await page.getByRole('button', { name: 'Choose a folder' }).click();
    await page.getByRole('button', { name: 'Sync selected repos' }).click();

    await page.waitForSelector('.bg-skeleton', {
      state: 'detached',
      timeout: 60 * 1000,
    });

    await page
      .locator('label')
      .filter({ hasText: 'Select all' })
      .getByRole('checkbox')
      .click();

    for (let i = 1; i <= REPOS_TO_SYNC; i++) {
      const repo = page.locator(`ul > :nth-match(li, ${i})`);
      repoNames.push(await repo.locator('span').innerText());
      await repo.click();
    }

    await page.getByRole('button', { name: 'Sync repositories' }).click();

    // GitHub login

    await expect(page.locator('.subhead-l > span')).toBeVisible();
    await page.getByRole('button').first().click();
    const [page1] = await Promise.all([
      page.waitForEvent('popup'),
      page.getByRole('button', { name: 'Connect GitHub' }).click(),
    ]);
    await page1
      .getByLabel('Username or email address')
      .fill(process.env.GITHUB_USER);
    await page1.getByLabel('Password').click();
    await page1.getByLabel('Password').fill(process.env.GITHUB_PASSWORD);
    await page1.getByRole('button', { name: 'Sign in' }).click();

    const githubAuthCode = await page
      .locator('.subhead-l > span')
      .first()
      .innerText();

    for (var i = 0; i < githubAuthCode.length; i++) {
      if (i === 4) continue;
      await page1.locator(`#user-code-${i}`).fill(githubAuthCode[i]);
    }

    await page1.getByRole('button', { name: 'Continue' }).click();
    await page1.getByRole('button', { name: 'Authorize BloopAI' }).click();
    await page1.close();

    await page.getByRole('button', { name: 'Sync selected repos' }).click();

    await page.waitForSelector('.bg-skeleton', {
      state: 'detached',
      timeout: 60 * 1000,
    });

    await page
      .locator('label')
      .filter({ hasText: 'Select all' })
      .getByRole('checkbox')
      .click();

    for (let i = 1; i <= REPOS_TO_SYNC; i++) {
      const repo = page.locator(`ul > :nth-match(li, ${i})`);
      repoNames.push(await repo.locator('span').innerText());
      await repo.click();
    }

    await page.getByRole('button', { name: 'Sync repositories' }).click();

    await Promise.all(
      repoNames.map((repoName) =>
        page.waitForSelector(`p:has-text("${repoName}")`, {
          state: 'attached',
          timeout: 60 * 1000,
        }),
      ),
    );

    await Promise.all(
      repoNames.map((repoName, i) =>
        page
          .locator('.bg-green-500')
          .nth(i)
          .waitFor({ timeout: 60 * 1000 }),
      ),
    );

    await page.evaluate(() => {
      console.log('local storage');
      for (i = 0; i < localStorage.length; i++) {
        console.log(
          localStorage.key(i) +
            '=[' +
            localStorage.getItem(localStorage.key(i)) +
            ']',
        );
      }
    });
  });

  test('Code search', async () => {
    test.setTimeout(5 * 1000);
    await page.locator('a').first().click();
    await page.getByPlaceholder('My search').click();
    await page.getByPlaceholder('My search').fill('test');
    await page.getByPlaceholder('My search').press('Enter');
    await expect(page.getByText(/Showing \d+ results?/)).toBeVisible();
  });

  test('Symbol search', async () => {
    test.setTimeout(5 * 1000);
    await page.locator('a').first().click();
    await page.getByPlaceholder('My search').click();
    await page.getByPlaceholder('My search').fill('symbol:test');
    await page.getByPlaceholder('My search').press('Enter');
    await expect(page.getByText(/Showing \d+ results?/)).toBeVisible();
  });

  test('Repo search', async () => {
    test.setTimeout(repoNames.length * 5 * 1000);
    for (let repoName of repoNames) {
      await page.locator('a').first().click();
      await page.getByPlaceholder('My search').click();
      await page.getByPlaceholder('My search').fill(`repo:${repoName}`);
      await page.getByPlaceholder('My search').press('Enter');
      await expect(page.getByText(/Showing \d+ results?/)).toBeVisible();
    }
  });

  test('Path search', async () => {
    test.setTimeout(5 * 1000);
    await page.locator('a').first().click();
    await page.getByPlaceholder('My search').click();
    await page.getByPlaceholder('My search').fill('path:src');
    await page.getByPlaceholder('My search').press('Enter');
    await expect(page.getByText(/Showing \d+ results?/)).toBeVisible();
  });
});
